<!DOCTYPE html>
<section id="feature" class="transparent-bg">
	<div class="container">
		<div class="center wow fadeInDown">
			<h1>Nos services</h1>
			<p class="lead">SurveyMania vous propose un outil simple et complet de création de sondage.<br/> En voici les différentes fonctionnalités :</p>
		</div>
		<div class="row" style="color:#000 !important">
			<div class="features">
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-arrows"></i>
						<h2>Drag&Drop</h2>
						<h3>Une interface simple et intuitive pour créer vos sondages</h3>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-pie-chart"></i>
						<h2>Statistiques</h2>
						<h3>Obtenez des statistiques ultra détaillées sur vos utilisateurs</h3>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-rocket"></i>
						<h2>Visibilité</h2>
						<h3>Grâce aux QRcodes, vous pouvez atteindre des milliers d'utilisateurs</h3>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-gamepad"></i>
						<h2>Mini-jeu</h2>
						<h3>Créez des minis-jeux afin de rendre vos sondages ludiques et amusants</h3>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-cogs"></i>
						<h2>Back-office</h2>
						<h3>Vous permet de gérer vos sondages ainsi que vos administrateurs</h3>
					</div>
				</div>
				<div class="col-md-4 col-sm-6 wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<div class="feature-wrap">
						<i class="fa fa-picture-o"></i>
						<h2>Templates</h2>
						<h3>Les templates prédéfinis de SurveyMania vous font gagner un temps précieux </h3>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>
<section id="family" class="col-md-12">
	<div id="mini-game" class="row-centered">
		<div class="col-md-8 col-centered">
			<div class="col-md-6 phaser" >
				<img src="../img/phaser.png" style="width:100%" />
			</div>
			<div class="col-md-6"> 
				<span class="minigame-title">Créez des minis-jeux pour dynamiser vos sondages !</span>
				<div class="minigame-text wow fadeInDown" data-wow-duration="1000ms" data-wow-delay="600ms">
					<p>SurveyMania permet de créer des minis-jeux avec une simple interface de drag&drop.</p> 
					<p>De cette façon, vous pouvez glissez au milieu de votre sondage des questions sous forme de mini-jeu pour <strong>attirer</strong> encore un peu plus l'attention de vos utilisateurs ! </p> 
					<p>La monotonie des feuilles de questions est <strong>révolue</strong> !</p> 
					<p>Placez vos utilisateurs au centre de votre processus pour qu'ils deviennent véritablement <strong>acteurs</strong> du sondage !</p> 
					<p><strong>Puzzle, plateformer, shoot'em up...</strong> Insérez n'importe quel type de jeu !</p>
				</div>
			</div>
		</div>
	</div>
	<div class="row-centered" style="background: #f2f2f2;padding-bottom:50px;">
		<div class="col-md-6 col-centered">
			<h1>Le principe</h1>
			<img src="../img/workflow.png" alt="workflow" style="margin:auto;display:block;margin:10px;"/>
			<p>Création du sondage</p>
			<p>Le QRcode est généré</p>
			<p>Le client scan le QRcode : le sondage s'ajoute sur son compte</p>
			<p>Le client répond au sondage</p>
			<p>Et gagne des points et des récompenses</p>
			<p>L'entreprise quant à elle peut voir les statistiques détaillées des sondages</p>
		</div>
		<canvas id="cvs1" width="250" height="125" style="margin-left: 100px; border: 2px solid;"></canvas>
		<canvas id="cvs2" width="250" height="125" style="margin-left: 100px; border: 2px solid;"></canvas>
	</div>
</section>
<script>
    jQuery(function($) {'use strict',
        new WOW().init();
    });
</script>


<script>
    window.onload = function ()
    {
        var canvas1 = document.getElementById("cvs1");
        var canvas2 = document.getElementById("cvs2");
        var context1 = canvas1.getContext('2d');
        var context2 = canvas2.getContext('2d');
        var imageXY  = {x: 5, y: 5};

        function getMousePos(canvas, evt) {
	        var rect = canvas.getBoundingClientRect();
	        return [ evt.clientX - rect.left, evt.clientY - rect.top];
      	}

        /**
        * This draws the image to the canvas
        */
        function Draw ()
        {
            //Clear both canvas first
            canvas1.width = canvas1.width
            canvas2.width = canvas2.width
            
            //Draw a red rectangle around the image
            if (state && state.dragging) {
                state.canvas.getContext('2d').strokeStyle = 'red';
                state.canvas.getContext('2d').strokeRect(imageXY.x - 2.5,
                                                         imageXY.y - 2.5,
                                                         state.image.width + 5,
                                                         state.image.height + 5);
            }
            
            // Now draw the image
            state.canvas.getContext('2d').drawImage(state.image, imageXY.x, imageXY.y);
        }




        canvas2.onclick =
        canvas1.onclick = function (e)
        {
            
            if (state && state.dragging) {
                state.dragging = false;
                Draw();
                return;
            }





            var mouseXY = getMousePos(e.target, e);

            state.canvas    = e.target;
            
            if (   mouseXY[0] > imageXY.x
                && mouseXY[0] < (imageXY.x + state.image.width)
                && mouseXY[1] > imageXY.y
                && mouseXY[1] < (imageXY.y + state.image.height)) {

                state.dragging       = true;
                state.originalMouseX = mouseXY[0];
                state.originalMouseY = mouseXY[1];
                state.offsetX         = mouseXY[0] - imageXY.x;
                state.offsetY         = mouseXY[1] - imageXY.y;

            }
        }

        canvas1.onmousemove =
        canvas2.onmousemove = function (e)
        {

            if (state.dragging) {
            
                state.canvas = e.target;
                
                var mouseXY = getMousePos(e.target, e);
                
                // Work how far the mouse has moved since the mousedon event was triggered
                var diffX = mouseXY[0] - state.originalMouseX;
                var diffY = mouseXY[1] - state.originalMouseY;

                imageXY.x = state.originalMouseX + diffX - state.offsetX;
                imageXY.y = state.originalMouseY + diffY - state.offsetY;
                
                Draw();
                
                e.stopPropagation();
            }
        }

        /**
        * Load the image on canvas1 initially and set the state up with some defaults
        */
        state = {}
        state.dragging     = false;
        state.canvas       = document.getElementById("cvs1");
        state.image        =  new Image();
        state.image.src    = 'http://www.rgraph.net/images/logo.png';
        state.offsetX      = 0;
        state.offsetY      = 0;

        state.image.onload = function ()
        {
            Draw();
        }
    }
</script>